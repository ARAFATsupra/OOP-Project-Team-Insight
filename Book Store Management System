class Book:
    """Represents a book."""

    def __init__(self, title, category, price):
        self.title = title
        self.category = category
        self.price = price


class User:
    """Base class for all users in the system."""

    def __init__(self, name):
        self.name = name


class Customer(User):
    """Represents a customer, inheriting from User."""

    def __init__(self, name):
        super().__init__(name)
        self.cart = Cart()
        self.wishlist = Wishlist()


class Admin(User):
    """Represents an admin, inheriting from User."""

    def __init__(self, name, password):
        super().__init__(name)
        self.__password = password

    def verify_password(self, password):
        return self.__password == password


class Cart:
    """Manages cart operations."""

    def __init__(self):
        self.__items = []

    def add_book(self, book):
        self.__items.append(book)
        print(f"{book.title} added to your cart.\n")

    def view_cart(self):
        if not self.__items:
            print("Your cart is empty.\n")
            return
        total_price = sum(book.price for book in self.__items)
        print("Your cart:")
        for book in self.__items:
            print(f"- {book.title} ({book.category}): BDT {book.price}")
        print(f"Total Price: BDT {total_price}\n")

    def checkout(self):
        if not self.__items:
            print("Your cart is empty. Cannot proceed to checkout.\n")
            return
        total_price = sum(book.price for book in self.__items)
        print(f"Total Amount: BDT {total_price}")
        print("Thank you for your purchase!\n")
        self.__items.clear()


class Wishlist:
    """Manages wishlist operations."""

    def __init__(self):
        self.__items = []

    def add_book(self, book):
        if book not in self.__items:
            self.__items.append(book)
            print(f"{book.title} added to your wishlist.\n")
        else:
            print(f"{book.title} is already in your wishlist.\n")

    def view_wishlist(self):
        if not self.__items:
            print("Your wishlist is empty.\n")
            return
        print("Your wishlist:")
        for book in self.__items:
            print(f"- {book.title} ({book.category})")
        print()


class BookRequest:
    """Manages requests for unavailable books."""

    def __init__(self):
        self.__requests = []

    def add_request(self, book_title):
        self.__requests.append(book_title)
        print(f"Request for {book_title} has been recorded.\n")

    def view_requests(self):
        if not self.__requests:
            print("No book requests found.\n")
        else:
            print("Requested books:")
            for idx, request in enumerate(self.__requests, 1):
                print(f"{idx}. {request}")
            print()


class BookStore:
    """Main system for the bookstore."""

    def __init__(self):
        self.books = [
            Book("The Fault in Our Stars", "Romantic", 400),
            Book("Gone Girl", "Thriller", 500),
            Book("A Brief History of Time", "Science Fiction", 600),
            Book("The Odyssey", "Literature", 700),
            Book("The Raven", "Poem", 300),
        ]
        self.book_request = BookRequest()
        self.admin = Admin("Admin", "admin123")

    def display_books(self):
        print("\nAvailable books:")
        for idx, book in enumerate(self.books, 1):
            print(f"{idx}. {book.title} ({book.category}): BDT {book.price}")
        print()

    def add_book(self, title, category, price):
        self.books.append(Book(title, category, price))
        print(f"Book '{title}' added successfully!\n")

    def remove_book(self, index):
        try:
            removed_book = self.books.pop(index)
            print(f"'{removed_book.title}' removed from the store.\n")
        except IndexError:
            print("Invalid book number.\n")


def admin_menu(store):
    """Admin menu interface."""
    print("****************************************************************************************************************************************************")
    print("\t\t\t\t\t####################--- Admin Panel ---####################")
    while True:
        print("****************************************************************************************************************************************************")
        print("Admin Options:")
        print("1) Change book price")
        print("2) Add book")
        print("3) Remove book")
        print("4) View requested books")
        print("5) Logout")
        print("****************************************************************************************************************************************************")
        choice = input("\nChoose an option: ")

        if choice == "1":
            store.display_books()
            try:
                index = int(input("Enter book number to change price: ")) - 1
                new_price = float(input("Enter new price: "))
                store.books[index].price = new_price
                print("Book price updated.\n")
            except (IndexError, ValueError):
                print("Invalid input.\n")

        elif choice == "2":
            title = input("Enter book title: ")
            category = input("Enter book category: ")
            try:
                price = float(input("Enter book price: "))
                store.add_book(title, category, price)
            except ValueError:
                print("Invalid price.\n")

        elif choice == "3":
            store.display_books()
            try:
                index = int(input("Enter book number to remove: ")) - 1
                store.remove_book(index)
            except ValueError:
                print("Invalid input.\n")

        elif choice == "4":
            store.book_request.view_requests()

        elif choice == "5":
            print("Logging out...\n")
            break

        else:
            print("Invalid choice.\n")


def main():
    store = BookStore()
    user = Customer("Guest")

    while True:
        print("****************************************************************************************************************************************************")
        print("\t\t\t\t#####################--- Welcome to the BOOK MANAGEMENT SYSTEM ---####################")
        print("****************************************************************************************************************************************************")
        print("1) See available books")
        print("2) Add book to cart")
        print("3) View your cart")
        print("4) Checkout")
        print("5) Add book to wishlist")
        print("6) View your wishlist")
        print("7) Request a book")
        print("8) Admin login")
        print("9) Exit")
        print("****************************************************************************************************************************************************")

        choice = input("\nChoose an option: ")

        if choice == "1":
            store.display_books()
        elif choice == "2":
            store.display_books()
            try:
                index = int(input("Enter book number to add to cart: ")) - 1
                user.cart.add_book(store.books[index])
            except (IndexError, ValueError):
                print("Invalid input.\n")
        elif choice == "3":
            user.cart.view_cart()
        elif choice == "4":
            user.cart.checkout()
        elif choice == "5":
            store.display_books()
            try:
                index = int(input("Enter book number to add to wishlist: ")) - 1
                user.wishlist.add_book(store.books[index])
            except (IndexError, ValueError):
                print("Invalid input.\n")
        elif choice == "6":
            user.wishlist.view_wishlist()
        elif choice == "7":
            book_title = input("Enter the title of the book you want to request: ")
            store.book_request.add_request(book_title)
        elif choice == "8":
            password = input("Enter admin password: ")
            if store.admin.verify_password(password):
                print("Admin login successful.\n")
                admin_menu(store)
            else:
                print("Incorrect password.\n")
        elif choice == "9":
            print("Thank you for visiting the Book Store!\n")
            break
        else:
            print("Invalid choice.\n")


if __name__ == "__main__":
    main()
